"use strict";

// function pow(x, n){
//     let result = 1;

//     for(let i = 0; i < n; i++) {
//         result = x * result;
//     }
//     return result;
// }


// console.log(pow(4,2));

// function pow(x, n){
//     if(n === 1) {
//         return x;
//     } else {
//         return x * pow(x, n - 1);
//     }
// }

// console.log(pow(4,2));

//=====
let students = {
    js: [{
        name: 'Johs',
        progress: 100
    }, {
        name: 'Ivan',
        progress: 60
    }],

    html: {
        basic: [{
            name: 'Peter',
            progress: 20
        }, {
            name: 'Ann',
            progress: 18
        }],

        pro: [{
            name: 'Sam',
            progress: 10
        }],
        semi: {
            students: [{
                name: 'Test',
                progress: 100
            }]
        }
    }
};

// function getTotalProgressByIteration(data) {
//     let total = 0;
//     let students = 0;

//     for (let course of Object.values(data)){
//         if (Array.isArray(course)) {
//             students += course.length;

//             for (let i = 0; i < course.length; i++) {
//                 total += course[i].progress;
//             }
//         } else {
//             for (let subCourse of Object.values(course)) {
//                 students += subCourse.length;

//                 for (let i = 0; i < subCourse.length; i ++) {
//                     total += subCourse[i].progress;
//                 }
//             }
//         }
//     }
//     return total / students;
// }


// console.log(getTotalProgressByIteration(students));

function getTotalProgressByRecursion(data) {
    if (Array.isArray(data)) {
        let total = 0;

        for (let i = 0; i < data.length; i++) {
            total += data[i].progress;
        }
        
        return [total, data.length];
    } else {
        let total = [0, 0];

        for(let subData of Object.values(data)) {
            const subDataArr = getTotalProgressByRecursion(subData);
            total[0] += subDataArr[0];
            total[1] += subDataArr[1];
        }
        return total;
    }    
}

const result = getTotalProgressByRecursion(students);

console.log(result[0] / result[1]);

// (*) –ó–∞–¥–∞—á–∞ –Ω–∞ —Ä–µ–∫—É—Ä—Å–∏—é
// –ó–¥–µ—Å—å –º—ã —Å –≤–∞–º–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ–¥–Ω—É –∏–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –Ω–∞ —Ä–µ–∫—É—Ä—Å–∏—é, –∫–æ—Ç–æ—Ä—É—é –¥–∞—é—Ç –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö. –ó–≤—É—á–∏—Ç –æ–Ω–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ:
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª.
// –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ, –Ω–æ –Ω—É–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å —á—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –≤–æ–æ–±—â–µ. –§–∞–∫—Ç–æ—Ä–∏–∞–ª  ‚Äì —ç—Ç–æ —á–∏—Å–ª–æ, —É–º–Ω–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞ "—Å–µ–±—è –º–∏–Ω—É—Å –æ–¥–∏–Ω", –∑–∞—Ç–µ–º –Ω–∞ "—Å–µ–±—è –º–∏–Ω—É—Å –¥–≤–∞", –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–æ 1. –§–∞–∫—Ç–æ—Ä–∏–∞–ª n –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è –∫–∞–∫ n!
// –û—Ç—Å—é–¥–∞ –º—ã –º–æ–∂–µ–º –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å 1 –∞—Ä–≥—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è —á–∏—Å–ª–æ–º. –ë—É–¥–µ—Ç –Ω–µ–ø–ª–æ—Ö–æ, –µ—Å–ª–∏ –≤—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ —Å—Ä–∞–∑—É –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—Ä–∏—Ö–æ–¥—è—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ :) –ü–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –≤ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏—Ö–æ–¥–∏—Ç –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ  - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –ª—é–±—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –ï—Å–ª–∏ 0 –∏ –º–µ–Ω—å—à–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–∏—Å–ª–æ 1.
// –°–∞–º –∂–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—ã–≥–ª—è–¥–∏—Ç –≤–æ—Ç —Ç–∞–∫:

// n! = n * (n - 1) * (n - 2) * ...*1 - —ç—Ç–æ –æ–±—â–∞—è —Ñ–æ—Ä–º—É–ª–∞

// –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö n:

// 1! = 1
// 2! = 2 * 1 = 2
// 3! = 3 * 2 * 1 = 6
// 4! = 4 * 3 * 2 * 1 = 24
// 5! = 5 * 4 * 3 * 2 * 1 = 120
// –¢–æ –µ—Å—Ç—å, –≤—ã–∑–æ–≤ –Ω–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ factorial(5) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ 120

// factorial(4) => 24

// –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –Ω—É–∂–Ω–æ —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏—é.
// –û—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç—É—Ç: —Å—Å—ã–ª–∫–∞
// –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ –¥—Ä—É–≥–æ–º—É, –Ω–æ —Ä–µ—à–µ–Ω–∏–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è - —Ç–æ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ.
// –ù–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ä–µ—à–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üôÇ

function factorial(n) {
    if (n <= 1) {
        return 1;
    } else if (!Number.isInteger(n) || typeof(n) !== 'number') {
        return '–ù–µ —á–∏—Å–ª–æ';
    }
    else {
        return n * factorial(n - 1);
    }  
}


// function factorial(n) {
//     if (typeof(n) !== 'number' || !Number.isInteger(n)) {
//         return "–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ";
//     }

//     if (n >= 1) {
//         return n * factorial(n - 1);
//     } else {
//         return 1;
//     }
// }

console.log(factorial(5));
console.log(factorial("aaa"));
console.log(factorial(5.2));
console.log(factorial(0));